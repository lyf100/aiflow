# Prompt Template: Python Semantic Analysis v1.0.0
# AI分析指挥与可视化平台 - 阶段 3: 语义分析
#
# 职责: 指导 AI 分析 Python 代码的业务语义、功能单元、数据流、控制流
# 输出: 符合标准数据协议的 behavior_metadata 部分（LaunchButton 和 FunctionalUnit）

metadata:
  id: "python-semantic-analysis-v1.0.0"
  version: "1.0.0"
  stage: "semantic_analysis"
  target_language: "python"
  created_at: "2025-10-12"
  author: "AIFlow Team"
  description: "分析 Python 代码的业务语义、功能单元、数据流、控制流"
  estimated_tokens: 2500
  quality_criteria:
    - 必须识别所有独立的业务功能单元
    - 必须为每个功能单元生成业务语义化的名称和描述
    - 必须为每个功能单元配置合适的启动按钮（macro/micro）
    - 必须识别功能单元的输入输出和依赖关系
    - 输出必须完全符合 analysis-schema-v1.0.0.json 中的 behavior_metadata 定义

# Jinja2 模板内容
template: |
  # AI 分析任务: Python 代码语义分析

  你是一位资深的业务分析师和 Python 架构师。你的任务是对 Python 项目进行业务语义分析，识别独立的功能单元并为可视化平台生成启动按钮。

  ## 项目上下文

  **项目路径**: {{ project_path }}
  **项目名称**: {{ project_name }}

  **第一阶段分析结果（项目认知）**:
  ```json
  {{ project_metadata_json }}
  ```

  **第二阶段分析结果（代码结构）**:
  ```json
  {{ code_structure_json }}
  ```

  **关键源代码文件内容**:
  {% for file in source_files %}
  ### {{ file.path }}
  ```python
  {{ file.content }}
  ```

  {% endfor %}

  ## 分析要求

  ### 1. 功能单元识别

  **定义**: 功能单元（FunctionalUnit）是具备独立业务价值、可以单独追踪执行流程的代码单元。

  **识别标准**:
  - ✅ Web API 端点（如 `/api/login`, `/api/order/create`）
  - ✅ CLI 命令入口（如 `cli.command('deploy')`）
  - ✅ 后台任务处理函数（如 Celery task, asyncio task）
  - ✅ 事件处理器（如消息队列消费者、WebSocket 事件处理）
  - ✅ 定时任务（如 cron job, scheduled task）
  - ✅ 主流程函数（如 `process_order()`, `analyze_data()`）
  - ❌ 工具函数（如 `format_date()`, `validate_email()`）
  - ❌ 数据模型类（单纯的数据容器）

  **功能单元类型**:
  - **macro**: 宏观功能单元，涉及多个模块协作，执行时间较长
  - **micro**: 微观功能单元，通常在单个模块内完成，执行时间较短

  ### 2. 启动按钮配置（LaunchButton）

  为每个功能单元生成一个启动按钮，用于在可视化界面上触发执行追踪。

  **按钮属性**:
  - **id**: UUID v4 格式
  - **node_id**: 关联的 CodeNode ID（通常是函数或类方法节点）
  - **name**: 业务语义化的按钮名称（如 "启动用户登录流程", "处理订单创建"）
  - **description**: 功能描述（自然语言，说明该功能的业务价值）
  - **type**: "macro" 或 "micro"
  - **icon**: 可选，图标名称（如 "play", "rocket", "gear"）

  ### 3. 业务语义化命名策略

  **核心原则**: 名称和描述应该让非技术人员也能理解。

  **示例**:
  - ❌ 技术命名: `POST /api/v1/users` → ✅ 业务描述: "创建新用户账户"
  - ❌ 技术命名: `process_payment()` → ✅ 业务描述: "处理在线支付流程"
  - ❌ 技术命名: `async_task_send_email()` → ✅ 业务描述: "发送邮件通知"

  ### 4. AI 置信度与解释

  为每个功能单元和启动按钮提供:
  - **AI Confidence** (0.0-1.0): 对识别结果的置信度
  - **AI Explanation**: 决策依据和推理过程
  - 标注不确定的部分

  ## 输出格式要求

  ```json
  {
    "behavior_metadata": {
      "launch_buttons": [
        {
          "id": "uuid-v4",
          "node_id": "关联的 CodeNode ID（来自第二阶段结果）",
          "name": "业务语义化的按钮名称",
          "description": "功能描述（自然语言）",
          "type": "macro 或 micro",
          "icon": "图标名称（可选）"
        }
      ]
    },
    "functional_units": [
      {
        "id": "uuid-v4",
        "node_id": "关联的 CodeNode ID",
        "name": "功能单元名称（业务语义化）",
        "description": "功能描述",
        "type": "macro 或 micro",
        "launch_button_id": "关联的 LaunchButton ID",
        "inputs": ["输入参数描述1", "输入参数描述2"],
        "outputs": ["输出结果描述1", "输出结果描述2"],
        "dependencies": ["依赖的其他功能单元或服务"],
        "metadata": {
          "ai_confidence": 0.90,
          "ai_explanation": "推理依据说明",
          "estimated_duration": "预估执行时长（如 \"100-500ms\", \"1-3s\"）",
          "business_value": "业务价值说明"
        }
      }
    ]
  }
  ```

  ## 质量标准检查清单

  在输出结果前，请自我检查:
  - [ ] 是否识别了所有主要的业务功能单元？
  - [ ] 是否过滤掉了工具函数和数据模型类？
  - [ ] 每个功能单元是否都有对应的启动按钮？
  - [ ] 按钮名称和描述是否使用了业务语义化表达？
  - [ ] 所有 ID 是否使用 UUID v4 格式？
  - [ ] node_id 是否正确引用了第二阶段的 CodeNode ID？
  - [ ] 是否为每个功能单元提供了 AI 置信度和解释？
  - [ ] 输出是否为有效的 JSON 格式？

  ## 开始分析

  现在请基于上述项目上下文和代码结构，输出完整的语义分析 JSON 结果：

# 输入数据 JSON Schema
input_schema:
  type: object
  required:
    - project_path
    - project_name
    - project_metadata_json
    - code_structure_json
    - source_files
  properties:
    project_path:
      type: string
    project_name:
      type: string
    project_metadata_json:
      type: string
      description: "第一阶段分析结果的 JSON 字符串"
    code_structure_json:
      type: string
      description: "第二阶段分析结果的 JSON 字符串"
    source_files:
      type: array
      items:
        type: object
        properties:
          path:
            type: string
          content:
            type: string

# 期望输出数据 JSON Schema
output_schema:
  $ref: "https://aiflow.dev/schemas/analysis-v1.0.0.json#/properties/behavior_metadata"

# 示例
examples:
  - name: "FastAPI 项目语义分析示例"
    expected_output_structure:
      launch_buttons_count: 5
      functional_units_count: 5
      sample_launch_button:
        id: "uuid-button-1"
        node_id: "uuid-login-function"
        name: "启动用户登录流程"
        description: "验证用户凭据并生成访问令牌"
        type: "micro"
        icon: "login"
      sample_functional_unit:
        id: "uuid-unit-1"
        node_id: "uuid-login-function"
        name: "用户登录验证"
        description: "接收用户名和密码，验证身份，返回JWT令牌"
        type: "micro"
        inputs: ["用户名（字符串）", "密码（字符串）"]
        outputs: ["JWT访问令牌", "用户信息对象"]
        dependencies: ["用户认证服务", "令牌生成服务"]
        metadata:
          ai_confidence: 0.92
          estimated_duration: "50-200ms"
          business_value: "提供安全的用户身份验证，保护系统资源访问"
